package com.jobreadyprogrammer.handler;

import com.jobreadyprogrammer.client.ElevenLabsClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class TwilioMediaStreamHandler extends TextWebSocketHandler {

    private final ElevenLabsClient elevenLabsClient;
    private final ConcurrentHashMap<String, WebSocketSession> twilioSessions = new ConcurrentHashMap<>();
    private String currentSessionId;
    private final KafkaProducer<String, String> kafkaProducer;

    @Autowired
    public TwilioMediaStreamHandler(ElevenLabsClient elevenLabsClient) {
        this.elevenLabsClient = elevenLabsClient;

        // Initialize Kafka Producer
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        this.kafkaProducer = new KafkaProducer<>(props);

        // Send a test message to Kafka on startup to verify the producer
        try {
            ProducerRecord<String, String> testRecord = new ProducerRecord<>("elevenlabs-topic", "test-key", "Test message from TwilioCallHandler on startup");
            kafkaProducer.send(testRecord, (metadata, exception) -> {
                if (exception == null) {
                    System.out.println("Test message sent to Kafka: topic=" + metadata.topic() + ", partition=" + metadata.partition() + ", offset=" + metadata.offset());
                } else {
                    System.err.println("Error sending test message to Kafka: " + exception.getMessage());
                    exception.printStackTrace();
                }
            });
        } catch (Exception e) {
            System.err.println("Error sending test message to Kafka during initialization: " + e.getMessage());
            e.printStackTrace();
        }

        // Connect to ElevenLabs WebSocket
        try {
            System.out.println("Connecting to ElevenLabs WebSocket...");
            elevenLabsClient.connectToWebSocket();
            setupWebSocketResponseHandler();
            System.out.println("ElevenLabs WebSocket connection and response handler setup complete");
        } catch (Exception e) {
            System.err.println("Failed to connect to ElevenLabs WebSocket: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void setupWebSocketResponseHandler() {
        elevenLabsClient.addMessageHandler(message -> {
            System.out.println("Received message from ElevenLabs: " + message);

            if (message == null || message.isEmpty()) {
                System.err.println("Received empty message from ElevenLabs, skipping processing");
                return;
            }

            String processedAudio = elevenLabsClient.processAgentResponse(message);
            System.out.println("Processed audio from ElevenLabs: " + processedAudio);

            if (processedAudio != null && !processedAudio.isEmpty() && currentSessionId != null) {
                // Send to Twilio
                System.out.println("Sending processed audio to Twilio session: " + currentSessionId);
                sendToTwilio(currentSessionId, processedAudio);

                // Send conversation data to Kafka
                try {
                    String conversationData = String.format(
                        "{\"sessionId\":\"%s\",\"timestamp\":\"%s\",\"audioLength\":%d,\"transcript\":\"%s\"}",
                        currentSessionId,
                        new java.util.Date().toString(),
                        processedAudio.length(),
                        processedAudio
                    );

                    System.out.println("Sending conversation data to Kafka: " + conversationData);
                    ProducerRecord<String, String> record = new ProducerRecord<>("elevenlabs-topic", currentSessionId, conversationData);

                    kafkaProducer.send(record, (metadata, exception) -> {
                        if (exception != null) {
                            System.err.println("Failed to send message to Kafka: " + exception.getMessage());
                            exception.printStackTrace();
                        } else {
                            System.out.println("Successfully sent message to Kafka: topic=" + metadata.topic()
                                + ", partition=" + metadata.partition() + ", offset=" + metadata.offset());
                        }
                    });
                } catch (Exception e) {
                    System.err.println("Error sending to Kafka: " + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                System.err.println("Cannot send to Kafka: processedAudio=" + processedAudio + ", currentSessionId=" + currentSessionId);
            }
        });
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        System.out.println("Twilio WebSocket connection established: " + session.getId());
        twilioSessions.put(session.getId(), session);
        if (currentSessionId == null) {
            currentSessionId = session.getId();
            System.out.println("Set currentSessionId to: " + currentSessionId);
        }
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        System.out.println("Received audio from Twilio: sessionId=" + session.getId() + ", payload=" + message.getPayload());
        this.currentSessionId = session.getId();

        if (message.getPayloadLength() == 0) {
            System.err.println("Empty message received from Twilio, ignoring");
            return;
        }

        try {
            System.out.println("Sending audio to ElevenLabs for session: " + session.getId());
            String result = elevenLabsClient.sendAudioToAgent(message.getPayload(), session.getId());

            if (result == null) {
                System.err.println("Failed to send audio to ElevenLabs for session: " + session.getId());
            } else {
                System.out.println("Successfully sent audio to ElevenLabs for session: " + session.getId() + ", result=" + result);
            }
        } catch (Exception e) {
            System.err.println("Error sending audio to ElevenLabs: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        System.out.println("Twilio WebSocket connection closed: " + session.getId() + " with status: " + status);
        twilioSessions.remove(session.getId());

        if (session.getId().equals(currentSessionId)) {
            currentSessionId = twilioSessions.isEmpty() ? null : twilioSessions.keySet().iterator().next();
            System.out.println("Updated currentSessionId to: " + currentSessionId);
        }

        if (twilioSessions.isEmpty()) {
            System.out.println("No active Twilio sessions, closing ElevenLabs WebSocket...");
            elevenLabsClient.closeWebSocket();
        }
    }

    public void sendToTwilio(String sessionId, String audioData) {
        WebSocketSession session = twilioSessions.get(sessionId);
        if (session != null && session.isOpen()) {
            try {
                System.out.println("Sending audio to Twilio session " + sessionId + ", data=" + audioData);
                session.sendMessage(new TextMessage(audioData));
                System.out.println("Audio successfully sent to Twilio session: " + sessionId);
            } catch (Exception e) {
                System.err.println("Failed to send message to Twilio: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.err.println("Twilio WebSocket session not found or not open for sessionId: " + sessionId);
        }
    }

    public void closeResources() {
        System.out.println("Closing resources...");
        elevenLabsClient.closeWebSocket();

        if (kafkaProducer != null) {
            try {
                kafkaProducer.flush();
                kafkaProducer.close();
                System.out.println("Kafka producer closed successfully");
            } catch (Exception e) {
                System.err.println("Error closing Kafka producer: " + e.getMessage());
            }
        }
    }
}
